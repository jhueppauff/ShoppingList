@page "/"
@using ShoppingList.Data
@using Shared.Model
@inject ShoppingListService shoppingListService
@inject ConfigurationService configurationService

<h1>Shopping List!</h1>
@if (shoppingLists == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Created</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in shoppingLists)
            {
                <tr>
                    <td><a href=@($"/List/{item.RowKey}") Match="NavLinkMatch.All">@item.RowKey</a></td>
                    <td>@item.Created</td>
                    <td><button class="btn btn-xs btn-danger" @onclick="@(e => OnButtonShowDeleteModalClick(item.RowKey))"><span class="fas fa-trash"></span> Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<form class="form-horizontal col-md-4">
    <fieldset>
        <legend>Create new List</legend>
        <div class="form-group">
            <input placeholder="List Name" class="form-control input-md" @bind="ListName" type="text" />
        </div>
        <div class="form-group">
            <button class="btn btn-success" @onclick="OnButtonCreateClickAsync"><span class="fas fa-plus"></span> Create</button>
        </div>
    </fieldset>
</form>

@if (showModal)
{
    <div class="modal fade show" id="myModal" style=" display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Are you sure?</h4>
                    <button type="button" class="close" data-dismiss="modal" @onclick="Show">&times;</button>
                </div>
                <div class="modal-body">
                    <p>Are you sure to delete the List "<b>@selectedListName</b>"</p>
                    <p>This step is permanent!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="@(e => OnButtonDeleteClickAsync(selectedListName))"><span class="fas fa-trash"></span> Yes</button>
                    <button type="button" class="btn btn-default" data-dismiss="modal" @onclick="Show">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<Shared.Model.ShoppingList> shoppingLists;
    private string user;
    private string cacheId;

    public string ListName { get; set; }

    private Boolean showModal { get; set; }

    public string selectedListName { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.showModal = false;
        var authState = await authenticationStateTask;

        if (configurationService.AuthenticationMode() == "AAD")
        {
            user = authState.User.Identity.Name;
        }
        else if (configurationService.AuthenticationMode() == "B2C")
        {

            user = authState.User.FindFirst("http://schemas.microsoft.com/identity/claims/objectidentifier").Value;
        }

        shoppingLists = await shoppingListService.GetShoppingListsAsync(user, cacheId).ConfigureAwait(false);
    }

    public async Task OnButtonDeleteClickAsync(string name)
    {
        await shoppingListService.DeleteListAsync(name, user).ConfigureAwait(false);
        await OnInitializedAsync().ConfigureAwait(false);
        cacheId = Guid.NewGuid().ToString();
    }

    public async Task OnButtonCreateClickAsync()
    {
        await shoppingListService.CreateShoppingListsAsync(user, ListName).ConfigureAwait(false); ;

        ListName = string.Empty;
        cacheId = Guid.NewGuid().ToString();

        await OnInitializedAsync().ConfigureAwait(false);
    }

    public void Show()
    {
        this.showModal = !this.showModal;
    }

    public void OnButtonShowDeleteModalClick(string listName)
    {
        this.selectedListName = listName;
        this.Show();
    }
}