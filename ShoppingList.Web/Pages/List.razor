@page "/List/{Name}"
@using ShoppingList.Data
@using Shared.Model
@inject ShoppingListItemService shoppingListItemService


@code {
    [Parameter]
    public string Name { get; set; }
}


<h3>@Name</h3>


@if (shoppingListItems == null)
{
    <p><em>Loading...</em></p>
}
else if (shoppingListItems.Count == 0)
{
    <h4>No items in the list, try adding some :)</h4>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Amount</th>
                <th>Done</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in shoppingListItems)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Amount</td>
                    @if (item.Done)
                    {
                        <td><input type="checkbox" checked="checked" value=@item.Done @onchange="@(e => CheckItemAsync(item.RowKey, !item.Done))" /></td>
                    }
                    else
                    {
                    <td><input type="checkbox" value=@item.Done @onchange="@(e => CheckItemAsync(item.RowKey, !item.Done))" /></td>
                    }
                    <td><button @onclick="@(e => DeleteItemAsync(item.RowKey))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    <input type="text" @bind="itemName" />
    <input type="number" @bind="amount" />
    <button @onclick="OnClickItemCreateAsync">Save</button>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public string itemName { get; set; }
    public int amount { get; set; }
    private string user;

    private List<Shared.Model.ShoppingListItem> shoppingListItems;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        this.user = authState.User.Identity.Name;

        shoppingListItems = await shoppingListItemService.GetShoppingListItemsAsync(user, Name).ConfigureAwait(false);
    }

    protected override async Task OnParametersSetAsync()
    {
        this.shoppingListItems = null;
        await OnInitializedAsync().ConfigureAwait(false); ;
    }

    private async Task OnClickItemCreateAsync()
    {
        await shoppingListItemService.CreateShoppingListItemAsync(user, Name, itemName, Convert.ToDouble(amount)).ConfigureAwait(false);

        itemName = string.Empty;
        amount = 0;

        await OnInitializedAsync().ConfigureAwait(false); ;
    }

    private async Task CheckItemAsync(string itemId, bool completed)
    {
        await shoppingListItemService.CompleteItemAsync(user, Name, itemId, completed).ConfigureAwait(false);

        shoppingListItems.SingleOrDefault(e => e.RowKey == itemId).Done = completed;
    }

    private async Task DeleteItemAsync(string itemId)
    {
        await shoppingListItemService.DeleteItemAsync(user, Name, itemId).ConfigureAwait(false);

        var item = shoppingListItems.FirstOrDefault(e => e.RowKey == itemId);
        shoppingListItems.Remove(item);
    }
}